{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/comments.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","post","setPost","className","map","postFromList","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","addComment","name","email","NewCommentForm","setComments","setError","useState","setName","setEmail","setBody","isLoading","setIsLoading","inputErrors","setInputErrors","submitNewComment","event","a","preventDefault","newComment","comments","onSubmit","htmlFor","placeholder","value","onChange","comment","target","PostDetails","error","isNewComment","setIsNewComment","loadApiComments","useEffect","handleDelete","commentId","current","filter","length","style","visibility","href","UserSelector","user","setUser","users","setUsers","userName","setUserName","isListOpen","setIsListOpen","catch","handleDocumentClick","document","addEventListener","removeEventListener","role","userFromList","chosenUser","App","setPosts","loadApiPosts","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dc623a85.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  post: Post | null;\n  setPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  post,\n  setPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(postFromList => (\n          <tr key={postFromList.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{postFromList.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {postFromList.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': post?.id !== postFromList.id },\n                )}\n                onClick={() => (post?.id !== postFromList.id\n                  ? setPost(postFromList)\n                  : setPost(null))}\n              >\n                {post?.id !== postFromList.id ? 'Open' : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  postId: number, name: string, email: string, body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import classNames from 'classnames';\nimport React, { useState, SetStateAction, ChangeEvent } from 'react';\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  setComments: (comment: SetStateAction<Comment[]>) => void;\n  setError: (message: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [inputErrors, setInputErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const submitNewComment = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      setInputErrors({\n        name: !name,\n        email: !email,\n        body: !body,\n      });\n\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const newComment = await addComment(postId, name, email, body);\n\n      setComments(comments => [...comments, newComment]);\n    } catch {\n      setError('Unable to add comment');\n      setComments([]);\n    } finally {\n      setBody('');\n      setIsLoading(false);\n    }\n  };\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setInputErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const fieldChangeName = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (inputErrors.name) {\n      setInputErrors(comment => ({\n        ...comment,\n        name: false,\n      }));\n    }\n\n    setName(event.target.value);\n  };\n\n  const fieldChangeEmail = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (inputErrors.email) {\n      setInputErrors(comment => ({\n        ...comment,\n        email: false,\n      }));\n    }\n\n    setEmail(event.target.value);\n  };\n\n  const fieldChangeBody = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (inputErrors.body) {\n      setInputErrors(comment => ({\n        ...comment,\n        body: false,\n      }));\n    }\n\n    setBody(event.target.value);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={submitNewComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': inputErrors.name })}\n            value={name}\n            onChange={fieldChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {inputErrors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputErrors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': inputErrors.email })}\n            value={email}\n            onChange={fieldChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {inputErrors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputErrors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': inputErrors.body })}\n            value={body}\n            onChange={fieldChangeBody}\n          />\n        </div>\n\n        {inputErrors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getComments } from '../api/comments';\n\ntype Props = {\n  post: Post | null;\n  setError: (message: string) => void;\n  error: string;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  setError,\n  error,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isNewComment, setIsNewComment] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadApiComments = async (postId: number) => {\n    try {\n      setIsLoading(true);\n      const data = await getComments(postId);\n\n      setError('');\n      setComments(data);\n    } catch {\n      setError('Something went wrong!');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post?.id) {\n      loadApiComments(post.id);\n      setError('');\n      setIsNewComment(false);\n      setComments([]);\n    }\n  }, [post?.id]);\n\n  const handleDelete = (commentId: number) => {\n    deleteComment(commentId);\n    setComments((current) => {\n      return current.filter(comment => comment.id !== commentId);\n    });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (<Loader />)}\n\n          {error !== '' && error !== 'No comments yet' && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          { !comments.length && !isLoading && (\n            <p\n              className=\"title is-4\"\n              data-cy=\"NoCommentsMessage\"\n              style={{\n                visibility: error !== ''\n                  ? 'hidden'\n                  : 'visible',\n              }}\n            >\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isNewComment && !isLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsNewComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {isNewComment && error === '' && (\n          <NewCommentForm\n            setComments={setComments}\n            postId={post?.id || 0}\n            setError={setError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: number;\n  setUser: (id: number) => void;\n  setError: (message: string) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  user,\n  setUser,\n  setError,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userName, setUserName] = useState('');\n  const [isListOpen, setIsListOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setError('Unable to get users'));\n  }, []);\n\n  const selectUser = (chosenUser: User) => {\n    if (chosenUser.id !== user) {\n      setUser(chosenUser.id);\n      setUserName(chosenUser.name);\n    }\n\n    setIsListOpen(false);\n  };\n\n  const handleDocumentClick = () => {\n    setIsListOpen(!isListOpen);\n  };\n\n  useEffect(() => {\n    if (isListOpen) {\n      document.addEventListener('click', handleDocumentClick);\n    }\n\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [isListOpen]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown',\n        { 'is-active': isListOpen })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsListOpen(current => !current)}\n        >\n          <span>{userName || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(userFromList => (\n            <a\n              key={userFromList.id}\n              href={`#user-${userFromList.id}`}\n              className={classNames('dropdown-item',\n                { 'is-active': userFromList.id === user })}\n              onClick={() => selectUser(userFromList)}\n            >\n              {userFromList.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\n\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [user, setUser] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [post, setPost] = useState<Post | null>(null);\n\n  const loadApiPosts = async (userId: number) => {\n    try {\n      setIsLoading(true);\n      const data = await getPosts(userId);\n\n      if (!data.length) {\n        setError('No posts yet');\n      }\n\n      setPosts(data);\n    } catch {\n      setError('Something went wrong!');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setPost(null);\n\n    if (user) {\n      loadApiPosts(user);\n    }\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  user={user}\n                  setUser={setUser}\n                  setError={setError}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && !isLoading && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {error === 'Something went wrong!' && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!posts.length && user !== 0 && !isLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && !isLoading && (\n                  <PostsList\n                    posts={posts}\n                    post={post}\n                    setPost={setPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': post },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {post && (\n                <PostDetails\n                  post={post}\n                  setError={setError}\n                  error={error}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (id:number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}